name: "Publish"

on:
  push:
    tags:
      - "*"

permissions:
  contents: "read"
  # Needed to access the workflow's OIDC identity.
  id-token: "write"

jobs:

  Build:
    name: "Build"
    runs-on: "ubuntu-latest"
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}

    steps:
    - name: "Checkout repository"
      uses: "actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b"

    - name: "Setup Python"
      uses: "actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435"
      with:
        python-version: "3.x"

    - name: "Install dependencies"
      run: |
        python -m pip install -r requirements/publish.txt

    - name: "Build dists"
      # Uses 'SOURCE_DATE_EPOCH' for build reproducibility.
      run: |
        SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct) \
        python -m build

    # Create hashes of all the built distributables.
    # This is the input for "subject" of the SLSA builder.
    - name: "Generate hashes"
      id: hash
      run: |
        cd dist && echo "::set-output name=hashes::$(sha256sum * | base64 -w0)"

    - name: "Upload dists"
      uses: "actions/upload-artifact@83fd05a356d7e2593de66fc9913b3002723633cb"
      with:
        name: "dist"
        path: "dist/"
        if-no-files-found: error
        retention-days: 5

  Provenance:
    needs: ["Build"]
    uses: "slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0"
    permissions:
      actions: read
      id-token: write
      # contents: write is only needed to upload the
      # attestation to the GitHub release.
      contents: write
    with:
      base64-subjects: "${{ needs.Build.outputs.hashes }}"
      upload-assets: true

  Publish:
    name: "Publish"
    if: startsWith(github.ref, 'refs/tags/')
    needs: ["Build", "Provenance"]
    runs-on: "ubuntu-latest"
    # This environment gives access to 'secrets.PYPI_TOKEN'
    # and must be approved by environment reviewers before running.
    environment:
      name: "publish"

    permissions:
      # contents: write is only needed to upload the
      # dists to the GitHub release.
      contents: write

    # Now that we've built and attested to the distributables
    # provenance we can upload them to PyPI and add to the GitHub release.
    steps:
    - name: "Download dists"
      uses: "actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7"
      with:
        name: "dist"
        path: "dist/"

    - name: "Upload dists to GitHub Release"
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      run: |
        gh release upload ${{ github.ref_name }} dist/* --repo ${{ github.repository }}

    - name: "Publish dists to PyPI"
      uses: "pypa/gh-action-pypi-publish@c7f29f7adef1a245bd91520e94867e5c6eedddcc"
      with:
        user: __token__
        password: "${{ secrets.PYPI_TOKEN }}"
